<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "/usr/share/xml/docbook/schema/dtd/4.5/docbookx.dtd">

<article>
	<articleinfo>
        <title>Protect Mode</title>
        <author><firstname>Leo</firstname><surname>Ye</surname></author>
	</articleinfo>

	<sect1><title>Introduce</title>
		<para>Under IA32, CPU works with two mode called <emphasis>Real Mode</emphasis>
			and <emphasis>Protect Mode</emphasis>. In Real Mode, it supports 16-bits register,
			16-bits data bus, 20-bits address bus, and 1 MB addressing limit.</para>
		<para>Given Logic Address "Segment:Offset", compute Physical Address according to
			"Physical Address = Segment * 16 + Offset".</para>
		<para>But in Protect Mode, things become a little differnt.
			It also use "Segment:Offset" to describe Logic Address, but the value of
			the Segment is a index(Selector) point to an entry in a table.
			This entry defines the start address of "Segment",
			with address limt, attribution, and so on.
			We call the entry "Descriptor",
			and the table "GDT" (GDT, it's short for Global Descriptor Table).</para>
		<para>With 32-bits Address Bus,
			the Address Space in Protect Mode could become 4GB.</para>
	</sect1>

	<sect1><title>Jump Into Protect Mode</title>
		<procedure>
			<step>Prepare GDT</step>
			<step>Use lgdt to load gdtr</step>
			<step>Open A20</step>
			<step>Set PE in cr0</step>
			<step>Jump into Protect Mode</step>
		</procedure>
	</sect1>

	<sect1><title>Paging</title>
		<para>We have learnt how logic Address map to linear address in protect mode.
			There still is a question how linear address map to physical address.
			First, we give a quick look of "Addressing at Protect Mode"</para>
		<imagedata fileref="logic2phy.jpeg"/>
		<para>So, we can see that the 32-bits linear address splits into 3 parts.
			High 10-bits means the offset of Page Directory Table(PDT).
			The Page Directory Entry(PDE) in PDT is address of a Page Table(PT).
			So with the High 10-bits, we can find the PT.
			And the middle 10-bits means offset of the found PT.
			The Page Table Entry(PTE) in PT is the address of Physical Page.
			SO with the Middle 10-bits, we can find the Physical Page.
			And the Low 12-bits is the offset of Physical Page,
			the content there is the final Physical Address.</para>
		<para></para>
	</sect1>

	<sect1><title>Descriptor And Selector</title>
		<sect2><title>Descriptor</title>
		<para>Here is structure of Descriptor.</para>
		<imageobject><imagedata fileref="res/descriptor.png"/></imageobject>
		<para>It is 8-Bytes structure, "Segment Base Address" split into 2 parts,
			and so does the "Segment Limit".</para>
		<para>It also has some attributions, I will introduce it.</para>
		<itemizedlist>
			<listitem><emphasis>P</emphasis>: P=1, segment is in memory;
				P=0, segment isn't in memory.</listitem>
			<listitem><emphasis>DPL</emphasis>: Descriptor Privilege Level</listitem>
			<listitem><emphasis>S</emphasis>: S=1, data or code segment;
				S=0, system or gate segment.</listitem>
			<listitem><emphasis>TYPE</emphasis>
				<informaltable frame="all">
					<tgroup cols="3">
					<thead><row><entry>Value</entry>
						<entry>S=1</entry>
						<entry>S=0</entry></row></thead>
					<tbody>
					<row><entry>0</entry>
						<entry>read only</entry>
						<entry>undefined</entry></row>
					<row><entry>1</entry>
						<entry>read only, accessed</entry>
						<entry>286TSS</entry></row>
					<row><entry>2</entry>
						<entry>read/write</entry>
						<entry>LDT</entry></row>
					<row><entry>3</entry>
						<entry>read/write, accessed</entry>
						<entry>busy 286TSS</entry></row>
					<row><entry>4</entry>
						<entry>read only, expand-down</entry>
						<entry>286 call gate</entry></row>
					<row><entry>5</entry>
						<entry>read only, expand-down, accessed</entry>
						<entry>task gate</entry></row>
					<row><entry>6</entry>
						<entry>read/write, expand-down</entry>
						<entry>286 interrupt gate</entry></row>
					<row><entry>7</entry>
						<entry>read/write, expand-down, accessed</entry>
						<entry>286 trap gate</entry></row>
					<row><entry>8</entry>
						<entry>execute only</entry>
						<entry>undefined</entry></row>
					<row><entry>9</entry>
						<entry>execute only, accessed</entry>
						<entry>386TSS</entry></row>
					<row><entry>A</entry>
						<entry>execute/read</entry>
						<entry>undefined</entry></row>
					<row><entry>B</entry>
						<entry>execute/read, accessed</entry>
						<entry>busy 386TSS</entry></row>
					<row><entry>C</entry>
						<entry>execute only, conforming code segment</entry>
						<entry>386 call gate</entry></row>
					<row><entry>D</entry>
						<entry>execute only, conforming code segment, accessed</entry>
						<entry>undefined</entry></row>
					<row><entry>E</entry>
						<entry>execute/read, conforming code segment</entry>
						<entry>386 interrupt gate</entry></row>
					<row><entry>F</entry>
						<entry>execute/read, conforming code segment, accessed</entry>
						<entry>386 trap gate</entry></row>
					</tbody>
					</tgroup>
				</informaltable></listitem>
			<listitem><emphasis>G</emphasis>: Describe the Granularity of Segment Limit.
				G=0, granularity is BYTE; G=1, 4KB.</listitem>
			<listitem><emphasis>D/B</emphasis>: It has 3 situation
				<itemizedlist>
					<listitem>In descriptor of executable code, it is D.
						D=1, instruction use 32-bits address and
						32-bits or 8-bits operand;
						D=0, instruction use 16-bits address and
						16-bits or 8-bits operand.</listitem>
					<listitem>In descriptor of expand-down data segment, it is B.
						B=1, segment upper limit is 4GB; B=0, 64KB</listitem>
					<listitem>In descriptor of stack, it is B.
						B=1, use 32-bits register esp; B=0, use sp.</listitem>
				</itemizedlist>
			</listitem>
			<listitem><emphasis>AVL</emphasis>: reserve</listitem>
		</itemizedlist>
		</sect2>

		<sect2><title>Selector</title>
		<para>And here is struct of Selector.</para>
		<imageobject><imagedata fileref="res/selector.png"/></imageobject>
		<para>It is a 16-Bits structurre.
			Because the size of Descriptor is 8, so the low 3-bits of Selector
			can be used as attribution.</para>
		</sect2>

	</sect1>

	<sect1><title>Privilege Level</title>
		<para>In IA32, there are 4 Privilage Level, 0 to 3 from high to low.
			While a low level task access to high level segment, it causes a error.</para>
		<para>But with different types of segment, the privilege may be different.
			In previous section, we can see RPL in Selector and DPL in Descriptor,
			With CPL(store in 0th-bit and 1th-bit in cs and ss),
			these will take effect.</para>
			<informaltable frame="all">
				<tgroup cols="2">
				<thead><row><entry>Type of Segment</entry>
					<entry>Accessable</entry></row></thead>
				<tbody>
				<row><entry>Data Segment</entry>
					<entry>max(CPL, RPL) &le; DPL </entry>
				</row>
				<row><entry>TSS</entry>
					<entry>max(CPL, RPL) &le; DPL </entry>
				</row>
				<row><entry>Call Gate</entry>
					<entry>max(CPL, RPL) &le; DPL </entry>
				</row>
				<row><entry>IUnconforming Code Segment</entry>
					<entry>CPL = DPL and RPL &le; DPL</entry>
				</row>
				<row><entry>Conforming Code Segment</entry>
					<entry>CPL &ge; DPL</entry>
				</row>
				<row><entry>Inconforming Code Segment(Use Call Gate and "call")</entry>
					<entry>CPL &ge; DPL</entry>
				</row>
				<row><entry>Inconforming Code Segment(Use Call Gate and "jmp")</entry>
					<entry>CPL = DPL</entry>
				</row>
				</tbody>
				</tgroup>
			</informaltable>

		<sect2><title>Call Gate</title>
		<para>Low level can use call gate to access high level Inconforming code segment.
			What is Call Gate?</para>
		<imageobject><imagedata fileref="res/gate.png"/></imageobject>
		<para>Call gate is a "Gate" to access destination code segment.
			So it has the selector and offset address of destination code segment.</para>

		<para>Here is the call gate procedure of CPU</para>
		<procedure>
			<step>According to DPL of destination code segment,
				select SS and ESP from TSS.</step>
			<step>Load new SS and ESP.</step>
			<step>push old SS and ESP into new stack.</step>
			<step>According to "Param Count" in call gate,
				copy parameters in caller's stack to new stack.</step>
			<step>push old CS and EIP into new stack.</step>
			<step>Load new CS and EIP, then execute.</step>
		</procedure>
		<para>These two stack might look like below.</para>
		<imageobject><imagedata fileref="res/low2high_stack.png"/></imageobject>

		<para>Here is the "ret" procedure of CPU</para>
		<procedure>
			<step>Check RPL in CS if privilege level should change.</step>
			<step>Load CS and EIP of caller.</step>
			<step>Accorind to argument of "ret", add esp to skip parameters.</step>
			<step>Load SS and ESP.</step>
			<step>Accorind to argument of "ret", add esp to skip parameters.</step>
			<step>Check ds,es,fs,gs, if DPL of selector in them smaller then
				CPL, set them nil.</step>
		</procedure>
		<para>These two stack might look like below.</para>
		<imageobject><imagedata fileref="res/high2low_stack.png"/></imageobject>

		</sect2>
	</sect1>
	
	<sect1><title>Interruption And Exception</title>
	</sect1>
</article>
